# a_txt_rewrite.py (remplace a.txt)
import socket
import struct
import pickle
import json
import threading
import time
from pygrabber.dshow_graph import FilterGraph
import pyaudio

HOST = "93.28.230.141"
PORT = 9999

# Audio config
A_CHUNK = 1024
A_FORMAT = pyaudio.paInt16
A_CHANNELS = 1
A_RATE = 44100

p = pyaudio.PyAudio()
out_stream = p.open(format=A_FORMAT, channels=A_CHANNELS, rate=A_RATE, output=True)

# Liste des caméras disponibles
graph = FilterGraph()
cams = graph.get_input_devices()
print("Caméras détectées :", cams)

# choix par défaut
current = {"cam_index": 0, "mic_index": None}

def recv_settings(conn):
    while True:
        try:
            hdr = conn.recv(1)
            if not hdr:
                break
            if hdr == b'S':
                ldata = conn.recv(2)
                if not ldata:
                    break
                slen = struct.unpack("H", ldata)[0]
                payload = conn.recv(slen)
                obj = json.loads(payload.decode('utf-8'))
                current['cam_index'] = obj.get('cam_index', 0)
                current['mic_index'] = obj.get('mic_index', None)
                print("[SERVER] Settings reçus :", current)
        except Exception as e:
            print("[SERVER] recv_settings_loop erreur:", e)
            break

def send_video_audio(conn):
    # capture caméra via pygrabber
    cap = graph.get_video_capture(current['cam_index'], width=640, height=480)
    try:
        while True:
            frame = cap.get_frame()  # numpy array
            if frame is not None:
                data = pickle.dumps(frame)
                conn.sendall(b'V' + struct.pack("Q", len(data)) + data)
            # ici tu peux ajouter l'audio si tu veux
            time.sleep(0.03)  # ~30 fps
    except Exception as e:
        print("[SERVER] erreur en envoi video/audio:", e)
    finally:
        cap.stop()

def main():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(1)
    print(f"[SERVER] En attente de connexion sur {HOST}:{PORT} ...")
    
    conn, addr = server_socket.accept()
    print("[SERVER] Connecté au client", addr)
    
    # lancer thread pour recevoir les settings
    threading.Thread(target=recv_settings, args=(conn,), daemon=True).start()
    
    # lancer envoi vidéo/audio
    send_video_audio(conn)

if __name__ == "__main__":
    main()
